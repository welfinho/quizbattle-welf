AWSTemplateFormatVersion: '2010-09-09'
Description: QuizBattle

Parameters:
  StageName:
    Type: String
    Default: prod
  CodeBucket:
    Type: String
    Default: quizbattle-code-welf
  ZipRegister:
    Type: String
    Default: register-player-welf-v2.zip
  ZipSubmit:
    Type: String
    Default: submit-answer-welf-v4.zip
  ZipNext:
    Type: String
    Default: next-question-welf-v5.zip
  ZipEmail:
    Type: String
    Default: send-score-email-welf-v1.zip
  SenderEmail:
    Type: String
    Default: quiz@example.com         # SES-verifiziert

Resources:

  ### SNS ###
  QuizEventTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: quizbattle-events

  ### DynamoDB (bleiben erhalten) ###
  PlayersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: QuizPlayers-welf
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: playerId
          AttributeType: S
      KeySchema:
        - AttributeName: playerId
          KeyType: HASH

  QuestionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: QuizQuestions-welf
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: questionId
          AttributeType: S
      KeySchema:
        - AttributeName: questionId
          KeyType: HASH

  ### IAM ###
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [ dynamodb:*, sns:Publish, ses:SendEmail, logs:* ]
                Resource: '*'

  ### Lambda: register ###
  RegisterPlayerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: register-player-welf
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key:    !Ref ZipRegister
      Environment:
        Variables:
          PLAYERS_TABLE: !Ref PlayersTable
          EVENT_TOPIC:   !Ref QuizEventTopic

  ### Lambda: submit ###
  SubmitAnswerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: submit-answer-welf
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key:    !Ref ZipSubmit
      Environment:
        Variables:
          PLAYERS_TABLE:   !Ref PlayersTable
          QUESTIONS_TABLE: !Ref QuestionsTable
          EVENT_TOPIC:     !Ref QuizEventTopic

  ### Lambda: next ###
  NextQuestionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: next-question-welf
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key:    !Ref ZipNext
      Environment:
        Variables:
          QUESTIONS_TABLE: !Ref QuestionsTable

  ### Lambda: E-Mail ###
  EmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: send-score-email-welf
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key:    !Ref ZipEmail
      Environment:
        Variables:
          SENDER: !Ref SenderEmail

  ### SNS â†’ Lambda ###
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref QuizEventTopic
      Protocol: lambda
      Endpoint: !GetAtt EmailFunction.Arn

  EmailInvokePerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EmailFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref QuizEventTopic

  ### API Gateway ###
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: QuizBattleAPI

  ResJoin:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId:  !GetAtt Api.RootResourceId
      PathPart: join

  ResSubmit:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId:  !GetAtt Api.RootResourceId
      PathPart: submit

  ResNext:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref Api
      ParentId:  !GetAtt Api.RootResourceId
      PathPart: next

  MethJoin:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ResJoin
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterPlayerFunction.Arn}/invocations"

  MethSubmit:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ResSubmit
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitAnswerFunction.Arn}/invocations"

  MethNext:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref ResNext
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NextQuestionFunction.Arn}/invocations"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [ MethJoin, MethSubmit, MethNext ]
    Properties:
      RestApiId: !Ref Api
      StageName: !Ref StageName

Outputs:
  BaseURL:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"